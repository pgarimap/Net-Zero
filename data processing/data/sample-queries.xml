<?xml version="1.0" encoding="UTF-8"?>
<queries>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="primary energy consumption by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"><![CDATA[

			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 	 };
			 	 	 declare function local:get-primary-renewable($outputs as node()*) as node()* {
			 	 	 unordered {
			 	 	 for $output in $outputs
			 	 	 let $new_output :=
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output }
			 	 		 }
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 return $new_root//text()
			 	 	 }
			 	 	 };
			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* {
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios,
			 	 	 $region in $regionsG
			 	 	 let $scenario_split := tokenize($scenario, ' '),
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
					 	 	 	local:get-primary-renewable($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or starts-with(@name,'elec_'))]//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output)
					 	 	 	| (: get the primaries :)
	 	 						$currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy/demand-physical/text()
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()

	 	 };
            	 local:run-primary-energy((:scenarios:), (:regions:), (:collection:))


                ]]></xPath>
            <comments/>
            <labelRewriteList append-values="false">
                <level name="input">
                    <rewrite from="water_td_pri_C" to=""/>
                    <rewrite from="H2 industrial" to=""/>
                    <rewrite from="traditional biomass" to="j traditional biomass"/>
                    <rewrite from="regional corn for ethanol" to="d biomass"/>
                    <rewrite from="regional biomass" to="d biomass"/>
                    <rewrite from="regional biomassOil" to="d biomass"/>
                    <rewrite from="traded coal" to="c coal"/>
                    <rewrite from="solar-elect" to="h solar"/>
                    <rewrite from="seawater" to=""/>
                    <rewrite from="elect_td_ind" to=""/>
                    <rewrite from="water_td_pri_W" to=""/>
                    <rewrite from="total biomass" to="d biomass"/>
                    <rewrite from="nuclear-H2" to="e nuclear"/>
                    <rewrite from="traded oil" to="a oil"/>
                    <rewrite from="k new" to="k new"/>
                    <rewrite from="exotic-elect" to="j breakthrough"/>
                    <rewrite from="wind-H2" to="g wind"/>
                    <rewrite from="biomass" to="d biomass"/>
                    <rewrite from="crude oil" to="a oil"/>
                    <rewrite from="nuclear-elect" to="e nuclear"/>
                    <rewrite from="solar-H2" to="h solar"/>
                    <rewrite from="regional natural gas" to=""/>
                    <rewrite from="traded unconventional oil" to="a oil"/>
                    <rewrite from="geothermal-elect" to="i geothermal"/>
                    <rewrite from="natural gas" to="b natural gas"/>
                    <rewrite from="wholesale gas" to=""/>
                    <rewrite from="traded natural gas" to="b natural gas"/>
                    <rewrite from="hydro-elect" to="f hydro"/>
                    <rewrite from="coal" to="c coal"/>
                    <rewrite from="wind-elect" to="g wind"/>
                </level>
            </labelRewriteList>
        </supplyDemandQuery>
    </aQuery>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="primary energy consumption by region (avg fossil efficiency)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"><![CDATA[

      	 	 	 declare function local:get-weighted-eff($outputs as node()*) as node()* {
			 	 		   unordered {
			 			     for $year in distinct-values($outputs/physical-output/@vintage)
			 		             let $eff_unweight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                               let $eff_curr := $res/parent::*/following-sibling::input-energy[1]/IO-coefficient[@vintage = $year]
			 		                               (: where $res/physical-output/@vintage = $year :)
			 		                               return $res div $eff_curr),
			 			             $weight := sum(for $res in $outputs/physical-output[@vintage = $year]
			 		                         (: where $res/physical-output/@vintage = $year :)
			 		                         return $res),
			 			             $eff_weighted := $eff_unweight div $weight
			 		             return element efficiency-weighted {attribute year { $year }, text { $eff_weighted }}
			             		}
			 	 	 };
			 	 	 declare function local:append-heirarchy($parent as node(), $append as node()) as node() {
			 	 		 let $scn := $parent/ancestor::scenario,
			 			   	  $rgn := $parent/ancestor::region
			 			   return
			 			   	  document { element scenario {
			 			 	  					$scn/@*,
			 			 						element region {
			 			 							$rgn/@*,
			 			 							$append
			 			 						}
			 			 	  				}
			 				}
			 	 		 (: let $new_node := element {local-name($parent)} {$parent/@*, $append}
			 	 		 return
			 	 		 if(local-name($parent) != 'scenario')
			 	 		 then local:append-heirarchy($parent/parent::*, $new_node)
			 	 		 else document { $new_node } :)
			 	 	 };
			 	 	 declare function local:get-primary-renewable($outputs as node()*, $weighted_effs as node()*) as node()* {
			 	 	 unordered {
			 	 	 for $output in $outputs (:,
			 	 	 $weighted_eff in $weighted_effs :)
			 	 	 let $new_output :=  (: element tempParent { :)
			 	 	 element input {
			 	 		 attribute type {'input'},
			 	 		 attribute name {$output/parent::*/following-sibling::keyword/@primary-renewable},
			 	 		 element demand-physical {
			 	 			 attribute vintage {$output/@vintage},
			 	 			 attribute unit {$output/@unit},
			 	 			 text { $output div $weighted_effs[@year=$output/@vintage] }
			 	 		 }(: ,
			 	 		 element keyword {
			 	 			 attribute primary-consumption { (: if($output/parent::*/following-sibling::keyword[fn:exists(@primary-renewable)])
			 	 						 then :) $output/parent::*/following-sibling::keyword/@primary-renewable
			 	 						 (: else $output/parent::*/parent::*/@name :)
			 	 		       }
			 	 		 } :)
			 	 	 (: } :)
			 	 	 },
			 	 	 $new_root := local:append-heirarchy($output/parent::*/parent::*, $new_output)
			 	 	 (:where $output/@vintage = $weighted_eff/@year:)
			 	 	 return $new_root//text()
			 	 	 }
			 	 	 };
			 	 	 declare function local:check-keyword($values as node()*) as node()* {
			 	 	 	unordered {
			 	 		for $value in $values
			 	 		let $input := $value/parent::*/parent::*,
			 	 		    $keyword_name :=
			 	 		        (: if($input/following-sibling::keyword[fn:exists(@primary-consumption)])
			 	 			then :) $input/following-sibling::keyword/@primary-consumption
			 	 			(: else $input/@name :),
			 	 		    $new_parent := element {local-name($input)} {$input/@*,
			 	 			$value/parent::*,
			 	 		        element keyword { attribute primary-consumption {$keyword_name} }
			 	 		        },
			 	 		    $new_root := local:append-heirarchy($input/parent::*, $new_parent)
			 	 		return $new_root//text()
			 	 		}
			 	 	};

			 	 	 declare function local:run-primary-energy($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* {
			 	 	 (: unordered { :)
			 	 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 	 		  then $regions
			 	 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 	 return
			 	 	 for $scenario in $scenarios,
			 	 	 $region in $regionsG
			 	 	 let $scenario_split := tokenize($scenario, ' '),
                     $scenario_name := string-join($scenario_split[position() < last()], ' '),
			 	 	 $scenario_date := $scenario_split[last()],
			 	 	 $currTree := collection($collection)/scenario[@name = $scenario_name and @date = $scenario_date]/world/*[@type = 'region' and @name=$region]
			 	 	 return (: get renewables from electricity :)
			 	 	 local:get-primary-renewable($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or @name='elect_td_bld' or starts-with(@name,'elec_'))]//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/*[@type='sector' (: collapse :) and (@name='electricity' or starts-with(@name, 'elec_'))]//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary))
					 		 	| (: get renewables from H2ProdCS :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 central production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 central production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary))
					 	 	 	| (: get renewables from H2ProdDist :)
					 	 	 	local:get-primary-renewable($currTree/supplysector[@name='H2 forecourt production'](: /*[@type='subsector' (: collapse :) and fn:not(@name='electrolysis')] :)//keyword[fn:exists(@primary-renewable)]/preceding-sibling::output-primary/physical-output, local:get-weighted-eff($currTree/supplysector[@name='H2 forecourt production']//keyword[fn:exists(@average-fossil-efficiency)]/preceding-sibling::output-primary))
					 	 	 	| (: get the primaries :)
	 	 						(: local:check-keyword( :) $currTree//keyword[fn:exists(@primary-consumption)]/preceding-sibling::input-energy[not(contains(@name, 'water'))]/demand-physical/text() (: ) :)
                                | (: get traditional biomass :)
							    $currTree//*[@type='input' and @name='traditional biomass']/demand-physical/node()

			 	 	 (: } :)
	 	 };
            	 local:run-primary-energy((:scenarios:), (:regions:), (:collection:))


                ]]></xPath>
            <comments/>
            <labelRewriteList append-values="false">
                <level name="input">
                    <rewrite from="H2 industrial" to=""/>
                    <rewrite from="traditional biomass" to="j traditional biomass"/>
                    <rewrite from="regional corn for ethanol" to="d biomass"/>
                    <rewrite from="regional biomass" to="d biomass"/>
                    <rewrite from="regional biomassOil" to="d biomass"/>
                    <rewrite from="traded coal" to="c coal"/>
                    <rewrite from="solar-elect" to="h solar"/>
                    <rewrite from="elect_td_ind" to=""/>
                    <rewrite from="total biomass" to="d biomass"/>
                    <rewrite from="traded oil" to="a oil"/>
                    <rewrite from="nuclear-H2" to="e nuclear"/>
                    <rewrite from="exotic-elect" to="j breakthrough"/>
                    <rewrite from="wind-H2" to="g wind"/>
                    <rewrite from="biomass" to="d biomass"/>
                    <rewrite from="crude oil" to="a oil"/>
                    <rewrite from="nuclear-elect" to="e nuclear"/>
                    <rewrite from="solar-H2" to="h solar"/>
                    <rewrite from="regional natural gas" to=""/>
                    <rewrite from="traded unconventional oil" to="a oil"/>
                    <rewrite from="geothermal-elect" to="i geothermal"/>
                    <rewrite from="natural gas" to="b natural gas"/>
                    <rewrite from="wholesale gas" to=""/>
                    <rewrite from="hydro-elect" to="f hydro"/>
                    <rewrite from="traded natural gas" to="b natural gas"/>
                    <rewrite from="coal" to="c coal"/>
                    <rewrite from="wind-elect" to="g wind"/>
                </level>
            </labelRewriteList>
        </supplyDemandQuery>

    </aQuery>

    <aQuery>
        <all-regions/>
        <emissionsQueryBuilder title="CO2 emissions by sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">
                *[@type='sector']//CO2/emissions/node()
            </xPath>
            <comments/>
        </emissionsQueryBuilder>
    </aQuery>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="total final energy by sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' and
                ((@name='building' or @name='industry' or @name='transportation') or
                (exists(child::keyword/@final-energy)))]//*[@type='input' (:collapse:) and
                not(@name='limestone' or @name='process heat cement' or @name='industrial energy use' or
                @name='industrial feedstocks' or @name='renewable' or contains(@name, 'trn_') or @name='oil-credits')]/
                demand-physical[@unit='EJ']/node()
            </xPath>
            <comments/>
        </supplyDemandQuery>

    </aQuery>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="building final energy by fuel">
            <axis1 name="input">input</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and
                (@name='building' or (exists(child::keyword[@final-energy='building'])))]//
                *[@type='input']/demand-physical/node()
            </xPath>
            <comments/>
        </supplyDemandQuery>

    </aQuery>

    <aQuery>
        <all-regions/>
        <emissionsQueryBuilder title="CO2 emissions by tech">
            <axis1 name="technology">technology</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector'
                ]/*[@type='subsector']/*[@type='technology']//
                CO2/emissions/node()
            </xPath>
            <comments/>
        </emissionsQueryBuilder>
    </aQuery>

    <aQuery>
        <all-regions/>
        <emissionsQueryBuilder title="CO2 emissions by region">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector' (:collapse:) or
                @type = 'resource' (:collapse:)](: / *[@type = 'subresource' (: collapse :)]
                :)//*[((@name='CO2'))]/emissions/node()
            </xPath>
            <comments/>
        </emissionsQueryBuilder>
    </aQuery>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="regional primary energy prices">
            <axis1 name="fuel">sector</axis1>
            <axis2 name="Year">cost</axis2>
            <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type = 'sector' and (@name='regional
                oil' or @name='regional natural gas'
                or @name='regional coal' or @name='regional biomass' or @name='nuclearFuelGenIII')]/
                cost/text()
            </xPath>
            <comments/>
        </supplyDemandQuery>
    </aQuery>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="final energy prices">
            <axis1 name="fuel">sector</axis1>
            <axis2 name="Year">cost</axis2>
            <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and (@name='wholesale
                gas' or @name='delivered gas' or
                @name='delivered coal' or @name='delivered biomass' or @name='traditional biomass' or
                @name='elect_td_ind' or @name='elect_td_bld' or @name='elect_td_trn' or
                @name='H2 wholesale dispensing' or @name='H2 wholesale delivery' or @name='H2 retail dispensing' or
                @name='H2 retail delivery' or
                @name='refined liquids industrial' or @name='refined liquids enduse')]/
                cost/text()
            </xPath>
            <comments/>
        </supplyDemandQuery>
    </aQuery>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="primary energy consumption with CCS by region (direct equivalent)">
            <axis1 name="fuel">input[@name]</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false"><![CDATA[

               declare function local:append-heirarchy($parent as node(), $append as node()*) as node() {
	       	 		 let $scn := $parent/ancestor::scenario,
	       			   	  $rgn := $parent (: /ancestor::region :)
	       			   return
	       			   	  document { element scenario {
	       			 	  					$scn/@*,
	       			 						element region {
	       			 							$rgn/@*,
	       			 							$append
	       			 						}
	       			 	  				}
	       				}
	       	 		 (: I can get by with just the scenario and region
	       			 let $new_node := element {local-name($parent)} {$parent/@*, $append}
	       	 		 return
	       	 		 if(local-name($parent) != 'scenario')
	       	 		 then local:append-heirarchy($parent/parent::*, $new_node)
	       	 		 else document { $new_node } :)
	       	 	 };
	       	 	 declare function local:generate-sector-input-coefs($outputNameQueue as xs:string*, $currTree as node(), $coefs as node()*, $is_usa as xs:boolean) as node()* {
                 if(empty($outputNameQueue)) then $coefs
                 else if( exists($coefs[@name = $outputNameQueue[1]]) or exists(index-of(('biomass',
'traded oil', 'traded coal', 'traded natural gas', 'regional corn for ethanol', 'regional biomassOil', 'regional sugar for ethanol', 'regional sugarbeet for ethanol'),
$outputNameQueue[1])) or not($currTree/*[@type='sector' and @name=$outputNameQueue[1]]))
then
(:if(not($is_usa) and string-length($currTree/@name) = 2) then
local:trace-inputs($outputName, $currTree/parent::*/*[@type='region' and @name='USA'], $outputs, true())
else:)
local:generate-sector-input-coefs(remove($outputNameQueue, 1), $currTree, $coefs, $is_usa)
	       				else
                    let $outputName := $outputNameQueue[1],
                        $newOutputNameQueue := remove($outputNameQueue, 1),
                        $useOutputs := $currTree//output-primary[@type='output' and @name=$outputName],
                        $useInputs := for $out in $useOutputs[not(following-sibling::keyword[exists(@primary-renewable)])]
                                      return $out/following-sibling::*[@type='input' and not(@name='oil-credits') and not(starts-with(@name, 'water_td'))],
                        $renewOutputs := for $out in $useOutputs[following-sibling::keyword[exists(@primary-renewable)]]
                                         return element output {
                                             attribute name { $out/following-sibling::keyword/@primary-renewable },
                                             $out/child::*
                                         },
                        $totalOutputSum := for $vintage in distinct-values($useOutputs/physical-output/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($useOutputs/physical-output[@vintage=$vintage])
                                                     }
                                                 },
                       $new_coefs := $coefs | element sector {
                                            attribute name { $outputName },
                                            for $input in distinct-values($useInputs/@name)
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       where $inputSum > 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    },
                                            for $input in distinct-values($renewOutputs/@name)
                                            return element input {
                                                       attribute name { concat($input, ' renewable') },
                                                       attribute is-renewable { true() },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($renewOutputs[@name=$input]/physical-output[@vintage=$outputSum/@vintage])
                                                       where $inputSum > 0
                                                       return element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              }
                                                    }
                                        }
                        return
                              local:generate-sector-input-coefs(distinct-values(($newOutputNameQueue, $useInputs/@name)), $currTree, $new_coefs, $is_usa)
		};
        declare function local:generate-ccs-coefs($currTree as node(), $coefs as node()*) as node()* {
            for $sector in $coefs/@name
            let $currSector := $currTree/*[@type='sector' and @name=$sector],
                $useInputs := $currSector//*[@type='technology' and not(contains(@name, 'CCS')) and not(child::keyword/@primary-renewable)]/*[@type='input' and not(@name='oil-credits') and not(starts-with(@name, 'water_td'))],
                $useInputsCCS := $currSector//*[@type='technology' and contains(@name, 'CCS')]/*[@type='input' and not(@name='oil-credits') and not(starts-with(@name, 'water_td'))],
                $totalOutputSum := for $vintage in distinct-values($useInputs/demand-physical/@vintage | $useInputsCCS/demand-physical/@vintage)
                                          return element output {
                                                     attribute vintage { $vintage },
                                                     text {
                                                         sum($currSector//output-primary/physical-output[@vintage=$vintage])
                                                     }
                                                 }
            return if(exists($useInputsCCS)) then
                element sector {
                                            attribute name { $sector },
                                            $coefs[@name=$sector]/input[@is-renewable],
                                            for $input in distinct-values(($useInputs/@name, $useInputsCCS/@name))
                                            return element input {
                                                       attribute name { $input },
                                                       for $outputSum in $totalOutputSum
                                                       let $inputSum := sum($useInputs[@name=$input]/demand-physical[@vintage=$outputSum/@vintage]),
                                                           $inputSumCCS := sum($useInputsCCS[@name=$input]/demand-physical[@vintage=$outputSum/@vintage])
                                                       return (element coef {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSum div $outputSum }
                                                              },
                                                              element coef_ccs {
                                                                  attribute vintage { $outputSum/@vintage },
                                                                  text { $inputSumCCS div $outputSum }
                                                              })
                                                    }
                                        }
                    else
                        $coefs[@name=$sector]
        };
        declare function local:apply-coefs($outputName as xs:string, $outputs as node()*, $coefs as node()*, $isCCS as xs:boolean) as node()* {
            if(exists($coefs[@name=$outputName]) and sum($outputs) > 0.001) then
                for $input in $coefs[@name=$outputName]/input
                return local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef[@vintage=$vintage]
                    where $coefThisVintage > 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
                        }, $coefs, $isCCS)
                    | local:apply-coefs($input/@name,
                    for $vintage in distinct-values($outputs/@vintage)
                    let $outputThisVintage := $outputs[@vintage=$vintage],
                        $firstOutput := $outputThisVintage[1],
                        $outputSum := sum($outputThisVintage),
                        $coefThisVintage := $input/coef_ccs[@vintage=$vintage]
                    where exists($coefThisVintage) and $coefThisVintage > 0
	       		    return element { local-name($firstOutput) } {
	       				$firstOutput/@*,
                        text{ $outputSum * $coefThisVintage }
	       			}, $coefs, true())
            else if( sum($outputs) > 0.001) then
                element input {
                    attribute name { if($isCCS) then concat($outputName, ' CCS') else $outputName },
                    attribute type { 'input' },
                    (: $outputs :) (: TODO: not sure why this doesn't work and we need to create these explicitly :)
                    for $o in $outputs
                    return element demand-physical { $o/@*, text{ $o/text() } }
                }
            else
                (: These are the residuals from chasing simulenaties, I've left this here
                   for debuging purposes :)
                element input {
                    attribute name { $outputName },
                    attribute type { 'input' } (:,
                    $outputs :)
                }
        };
		declare function local:run-input-by-primary($scenarios as xs:string*, $regions as xs:string*, $collection as xs:string) as node()* {
			 	 unordered {
			 	 let $regionsG := if(not($regions[1] = 'Global'))
			 	 		  then $regions
			 	 		  else distinct-values(collection($collection)/scenario/world/*[@type='region']/@name)
			 	 return
			 	 for $scenario in $scenarios,
			 	 $region in $regionsG
			 	 let $scenario_split := tokenize($scenario, ' '),
				 $currTree := collection($collection)/scenario[@name = $scenario_split[1] and @date = $scenario_split[2]]/world/*[@type='region' and @name=$region],
                 $currInputs := $currTree/*[@type='sector' and (@name='unconventional oil production' or exists(child::keyword/@final-energy))]//*[@type='input' and empty(index-of(('trn_pass_road', 'limestone', 'process heat cement', 'industrial energy use', 'industrial feedstocks', 'renewable', 'trn_freight_road', 'trn_pass_road_LDV', 'trn_pass_road_LDV_2W', 'trn_pass_road_LDV_4W', 'unconventional oil', 'oil-credits', 'scrap', 'alumina'), @name))],
                 $coefs := local:generate-sector-input-coefs(distinct-values($currInputs/@name), $currTree, (), false()),
                 $ccs_coefs := local:generate-ccs-coefs($currTree, $coefs)
				 return
				    for $inputName in distinct-values($currInputs/@name)
				    return local:append-heirarchy($currTree, local:apply-coefs($inputName, $currInputs[@name=$inputName]/demand-physical, $ccs_coefs, false()))//text()
			 	 }
	 	 };
		 local:run-input-by-primary((:scenarios:), (:regions:), (:collection:))


                ]]></xPath>
            <comments>WARNING: Results are slightly inflated due to improper secondary-output accounting</comments>
            <labelRewriteList append-values="false">
                <level name="input">
                    <rewrite from="water consumption CCS" to=""/>
                    <rewrite from="traditional biomass" to="j traditional biomass"/>
                    <rewrite from="seawater CCS" to=""/>
                    <rewrite from="coal CCS" to="c coal CCS"/>
                    <rewrite from="wind-H2 renewable" to="g wind"/>
                    <rewrite from="regional biomassOil CCS" to="d biomass CCS"/>
                    <rewrite from="traded coal" to="c coal"/>
                    <rewrite from="limestone" to=""/>
                    <rewrite from="seawater" to=""/>
                    <rewrite from="traded biomass CCS" to="d biomass CCS"/>
                    <rewrite from="geothermal-elect renewable CCS" to="i geothermal"/>
                    <rewrite from="hydro-elect renewable" to="f hydro"/>
                    <rewrite from="wind-elect renewable" to="g wind"/>
                    <rewrite from="nuclear-H2 renewable" to="e nuclear"/>
                    <rewrite from="crude oil" to="a oil"/>
                    <rewrite from="regional natural gas" to=""/>
                    <rewrite from="traded coal CCS" to="c coal CCS"/>
                    <rewrite from="natural gas CCS" to="b natural gas CCS"/>
                    <rewrite from="traded biomass" to="d biomass"/>
                    <rewrite from="geothermal-elect" to="i geothermal"/>
                    <rewrite from="water consumption" to=""/>
                    <rewrite from="renewable" to=""/>
                    <rewrite from="water withdrawals CCS" to=""/>
                    <rewrite from="coal" to="c coal"/>
                    <rewrite from="traded natural gas CCS" to="b natural gas CCS"/>
                    <rewrite from="regional corn for ethanol" to="d biomass"/>
                    <rewrite from="geothermal-elect renewable" to="i geothermal"/>
                    <rewrite from="crude oil CCS" to="a oil CCS"/>
                    <rewrite from="regional biomassOil" to="d biomass"/>
                    <rewrite from="wind-elect renewable CCS" to="g wind"/>
                    <rewrite from="regional corn for ethanol CCS" to="d biomass CCS"/>
                    <rewrite from="hydro-elect renewable CCS" to="f hydro"/>
                    <rewrite from="regional sugar for ethanol CCS" to="d biomass CCS"/>
                    <rewrite from="traded unconventional oil CCS" to="a oil CCS"/>
                    <rewrite from="elect_td_ind" to=""/>
                    <rewrite from="biomass CCS" to="d biomass CCS"/>
                    <rewrite from="traded oil" to="a oil"/>
                    <rewrite from="traded oil CCS" to="a oil CCS"/>
                    <rewrite from="exotic-elect" to="j breakthrough"/>
                    <rewrite from="biomass" to="d biomass"/>
                    <rewrite from="nuclear-elect renewable" to="e nuclear"/>
                    <rewrite from="solar-elect renewable CCS" to="h solar"/>
                    <rewrite from="traded unconventional oil" to="a oil"/>
                    <rewrite from="regional sugar for ethanol" to="d biomass"/>
                    <rewrite from="natural gas" to="b natural gas"/>
                    <rewrite from="solar-elect renewable" to="h solar"/>
                    <rewrite from="traded natural gas" to="b natural gas"/>
                    <rewrite from="regional sugarbeet for ethanol" to="d biomass"/>
                    <rewrite from="water withdrawals" to=""/>
                    <rewrite from="solar-H2 renewable" to="h solar"/>
                    <rewrite from="wind-elect" to="g wind"/>
                    <rewrite from="nuclear-elect renewable CCS" to="e nuclear"/>
                </level>
            </labelRewriteList>
        </supplyDemandQuery>
    </aQuery>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="hydrogen production by tech">
            <axis1 name="technology">technology</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and (@name='H2
                central production' or @name='H2 wholesale dispensing' or @name='H2 industrial')]/
                *[@type='subsector' and not (@name='H2 delivery')]/*[@type='technology']/*[@type='output' (:collapse:)]/
                physical-output/node()
            </xPath>
            <comments/>
        </supplyDemandQuery>
    </aQuery>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="hydrogen costs by tech">
            <axis1 name="technology">technology</axis1>
            <axis2 name="Year">cost</axis2>
            <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and
                contains(@name,'H2')]/
                *[@type='subsector']/*[@type='technology']/cost/text()
            </xPath>
            <comments/>
        </supplyDemandQuery>

    </aQuery>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="transport final energy by fuel">
            <axis1 name="input">input</axis1>
            <axis2 name="Year">demand-physical[@vintage]</axis2>
            <xPath buildList="true" dataName="input" group="false" sumAll="false">*[@type='sector' (:collapse:) and
                (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]//
                *[@type='input' and not (@name='renewable')]/demand-physical[@unit='EJ']/node()
            </xPath>
            <comments/>
        </supplyDemandQuery>

    </aQuery>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="transport service output by tech">
            <axis1 name="technology">technology</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' and
                (@name='transportation' or (exists(child::keyword[@final-energy='transportation'])))]/
                *[@type='subsector']/*[@type='technology']/*[@type='output' (:collapse:) and not (@name='CAFEcredit')]/
                physical-output/node()
            </xPath>
            <comments/>
        </supplyDemandQuery>
    </aQuery>


    <aQuery>
        <all-regions/>
        <emissionsQueryBuilder title="CO2 sequestration by sector">
            <axis1 name="sector">sector</axis1>
            <axis2 name="Year">emissions-sequestered</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector'
                ]//CO2/emissions-sequestered/node()
            </xPath>
            <comments/>
        </emissionsQueryBuilder>
    </aQuery>

    <aQuery>
        <all-regions/>
        <emissionsQueryBuilder title="CO2 sequestration by tech">
            <axis1 name="subsector">subsector</axis1>
            <axis2 name="Year">emissions-sequestered</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector'
                ]/*[@type='subsector']/*[@type='technology']//
                CO2/emissions-sequestered/node()
            </xPath>
            <comments/>
        </emissionsQueryBuilder>
    </aQuery>

    <aQuery>
        <all-regions/>
        <emissionsQueryBuilder title="CO2 emissions by subsector">
            <axis1 name="subsector">subsector</axis1>
            <axis2 name="Year">emissions</axis2>
            <xPath buildList="true" dataName="emissions" group="false" sumAll="false">*[@type = 'sector'
                ]/*[@type='subsector']//CO2/emissions/node()
            </xPath>
            <comments/>
        </emissionsQueryBuilder>
    </aQuery>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="elec gen by subsector">
            <axis1 name="subsector">subsector</axis1>
            <axis2 name="Year">physical-output[@vintage]</axis2>
            <xPath buildList="true" dataName="output" group="false" sumAll="false">*[@type='sector' (:collapse:) and
                (@name='electricity' or
                @name='base load generation' or @name='intermediate generation' or @name='subpeak generation' or
                @name='peak generation' or @name='elect_td_bld')]/
                *[@type='subsector' and not (@name='elect_td_bld')]//*[@type='output' (:collapse:)]/
                physical-output/node()
            </xPath>
            <comments/>
        </supplyDemandQuery>

    </aQuery>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="elec gen costs by subsector">
            <axis1 name="subsector">subsector</axis1>
            <axis2 name="Year">cost</axis2>
            <xPath buildList="true" dataName="cost" group="false" sumAll="false">*[@type='sector' and
                (@name='electricity' or @name='base load generation' or
                @name='intermediate generation' or @name='subpeak generation' or @name='peak
                generation')]/*[@type='subsector']/cost/text()
            </xPath>
            <comments>doesn't include rooftop PV</comments>
        </supplyDemandQuery>

    </aQuery>

    <aQuery>
        <all-regions/>
        <gdpQueryBuilder title="GDP MER by region">
            <axis1 name="region">region</axis1>
            <axis2 name="Year">gdp-mer</axis2>
            <xPath buildList="true" dataName="gdp-mer" group="false" sumAll="false">GDP/gdp-mer/text()</xPath>
            <comments/>
        </gdpQueryBuilder>

    </aQuery>

    <aQuery>
        <all-regions/>
        <ClimateQuery title="total climate forcing">
            <axis1 name="forcing-total">none</axis1>
            <axis2 name="Year">forcing-total[@year]</axis2>
            <xPath buildList="true" dataName="forcing-total" group="false" sumAll="false">
                climate-model/forcing-total/text()
            </xPath>
            <comments/>
        </ClimateQuery>

    </aQuery>

    <aQuery>
        <all-regions/>
        <ClimateQuery title="global mean temperature">
            <axis1 name="temperature">none</axis1>
            <axis2 name="Year">global-mean-temperature[@year]</axis2>
            <xPath buildList="true" dataName="global-mean-temperature" group="false" sumAll="false">
                climate-model/global-mean-temperature/text()
            </xPath>
            <comments/>
        </ClimateQuery>

    </aQuery>

    <aQuery>
        <all-regions/>
        <supplyDemandQuery title="hydrogen prices by sector">
            <axis1 name="fuel">sector</axis1>
            <axis2 name="Year">cost</axis2>
            <xPath buildList="true" dataName="price" group="false" sumAll="false">*[@type='sector' and
                contains(@name,'H2')]/cost/text()
            </xPath>
            <comments/>
        </supplyDemandQuery>


    </aQuery>

</queries>
